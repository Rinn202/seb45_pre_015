name: Java CI with Gradle
on: 							#이벤트 트리거 조건
  push:							#push가 main 브랜치에 발생
    branches: [ main ]
jobs:							# 작업 정의
  build:						# jabs의 작업 이름
    runs-on: ubuntu-latest		# 실행 운영체제
    steps:								# 작업 단계 정의
      - uses: actions/checkout@v2		# Git 저장소의 소스 코드를 가져 옴
      - name: Set up JDK 11				# 마켓플레이스 등록 작업으로 JDK 11을 설정
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
      - name: Grant execute permission for gradlew 		# gradlew에 실행권한을 부여
        run: chmod +x gradlew
      - name: Build with Gradle 		# 프로젝트 빌드
        run: ./gradlew build
      - name: Docker build				# 도커 이미지 빌드
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build -t spring-cicd . 
          docker tag spring-cicd ${{ secrets.DOCKER_HUB_USERNAME }}/spring-cicd:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/spring-cicd:${GITHUB_SHA::7}

      - name: Configure AWS credentials        # AWS 인증
        uses: aws-actions/configure-aws-credentials@v1
        with: # 시크릿 키에 등록한 엑세스 키 사용
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2            # 리전 - 대한민국/서울
      - name: Start Session Manager session    # 세션메니저로 EC2연결
        run: aws ssm start-session --target {인스턴스 id}
      - name: Deploy to Server
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          aws ssm send-command \	# 세션메니저를 통해 실행할 명령어
            --instance-ids {인스턴스 id} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'if sudo docker ps -a --format \\'{{.Names}}\\' | grep -q \'^server$\\'; then', # server라는 이름의 컨테이너가 실행중이면
              '  sudo docker stop server', 	# 컨테이너 종료
              '  sudo docker rm server', 		# 컨테이너 삭제
              'fi',
              'sudo docker pull ${{ secrets.AWS_ACCESS_KEY }}/spring-cicd:${GITHUB_SHA::7}',
              'sudo docker tag ${{ secrets.AWS_ACCESS_KEY }}/spring-cicd:${GITHUB_SHA::7} spring-cicd',	# 이미지 pull, 이미지 tag 변경
              'sudo docker run -d --name server -p 8080:8080 spring-cicd'
            ]" \		# 이미지로 컨테이너 실행
            --output text